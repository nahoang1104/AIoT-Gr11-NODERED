[
    {
        "id": "bf91fb810eb5ad4a",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8ed2dfd6510fad3a",
        "type": "ui_switch",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "label": "Tắt/Bật Đèn A",
        "tooltip": "",
        "group": "24a10c4b88df729a",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Trạng thái đèn A",
        "topicType": "str",
        "style": "",
        "onvalue": "aOn",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "aOff",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 500,
        "y": 400,
        "wires": [
            [
                "48c8c287d9641c4d"
            ]
        ]
    },
    {
        "id": "3eb517d0a52a81b4",
        "type": "comment",
        "z": "bf91fb810eb5ad4a",
        "name": "Flow điều khiển từ xa",
        "info": "",
        "x": 160,
        "y": 380,
        "wires": []
    },
    {
        "id": "48c8c287d9641c4d",
        "type": "mqtt out",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "topic": "home/22127392clc/relayControl/a",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "787c15375433df86",
        "x": 820,
        "y": 360,
        "wires": []
    },
    {
        "id": "430f93b94cc6165f",
        "type": "ui_switch",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "label": "Tắt/Bật Đèn B",
        "tooltip": "",
        "group": "24a10c4b88df729a",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Trạng thái đèn B",
        "topicType": "str",
        "style": "",
        "onvalue": "bOn",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "bOff",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 500,
        "y": 460,
        "wires": [
            [
                "eb533d982d3409bd"
            ]
        ]
    },
    {
        "id": "f2a6a53fc98c1def",
        "type": "mqtt in",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "topic": "home/22127392clc/relayState",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "787c15375433df86",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 420,
        "wires": [
            [
                "8ed2dfd6510fad3a",
                "430f93b94cc6165f"
            ]
        ]
    },
    {
        "id": "81e5ee6677e15799",
        "type": "ui_time_scheduler",
        "z": "bf91fb810eb5ad4a",
        "group": "a10e63e8134491e0",
        "name": "Hẹn giờ đèn A",
        "startDay": "1",
        "refresh": 60,
        "devices": [
            "Đèn A"
        ],
        "singleOff": true,
        "onlySendChange": false,
        "customPayload": false,
        "eventMode": false,
        "eventOptions": [],
        "sendTopic": true,
        "lat": "10.818328",
        "lon": "106.766971",
        "customContextStore": "default",
        "outputs": 2,
        "order": 1,
        "width": 0,
        "height": 0,
        "x": 240,
        "y": 600,
        "wires": [
            [
                "eaa3b7c734879824"
            ],
            []
        ]
    },
    {
        "id": "eaa3b7c734879824",
        "type": "function",
        "z": "bf91fb810eb5ad4a",
        "name": "Hàm lập lịch đèn A",
        "func": "// Step 1: Parse string to object\nlet data = JSON.parse(msg.payload);\n\n// Step 2: Check timers array\nif (data.timers && data.timers.length > 0) {\n    // Get the last timer\n    let lastTimer = data.timers[data.timers.length - 1];\n\n    // Step 3: Create new object with only the last timer\n    msg.payload = {\n        timers: [lastTimer],\n        settings: data.settings || {},\n        device: \"a\"\n    };\n\n    // Step 4: Convert back to string\n\n    return msg;\n} else {\n    // If no timers, send empty\n    msg.payload = {\n        timers: [],\n        settings: data.settings || {},\n        device: \"a\"\n    };\n\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 600,
        "wires": [
            [
                "2ff37df89d815e81",
                "3a27a6d225d19890",
                "7afc6f20ca1b9967"
            ]
        ]
    },
    {
        "id": "3a27a6d225d19890",
        "type": "function",
        "z": "bf91fb810eb5ad4a",
        "name": "Unix Time Formater",
        "func": "// Parse timers from payload\nlet timers = msg.payload.timers;\n\nfunction convertToTimeString(timestamp) {\n    let date = new Date(timestamp);\n    let vietnamTime = new Date(date.getTime() + (7 * 60 * 60 * 1000));\n    let hours = vietnamTime.getUTCHours().toString().padStart(2, '0');\n    let minutes = vietnamTime.getUTCMinutes().toString().padStart(2, '0');\n    let seconds = vietnamTime.getUTCSeconds().toString().padStart(2, '0');\n    return `${hours}:${minutes}:${seconds}`;\n}\n\n// Check if timers exist\nif (timers && timers.length > 0\n&& !(\"disabled\" in timers[0])) {\n    // Convert to Date object\n    let startString = convertToTimeString(timers[0].starttime);\n    let endString = convertToTimeString(timers[0].endtime);\n\n    // Output\n    msg.payload = `${startString}|${endString}|${timers[0].days}|a`;\n}\nelse\n{\n    msg.payload = 'a';\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 600,
        "wires": [
            [
                "370f54e719c4fc38"
            ]
        ]
    },
    {
        "id": "2ff37df89d815e81",
        "type": "json",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 370,
        "y": 680,
        "wires": [
            [
                "81e5ee6677e15799",
                "c5faa848497ca415"
            ]
        ]
    },
    {
        "id": "370f54e719c4fc38",
        "type": "mqtt out",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "topic": "home/22127392clc/relaySchedule/a",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "787c15375433df86",
        "x": 940,
        "y": 600,
        "wires": []
    },
    {
        "id": "90ffda7df7829bb6",
        "type": "ui_time_scheduler",
        "z": "bf91fb810eb5ad4a",
        "group": "f154a3307f684ab4",
        "name": "Hẹn giờ đèn B",
        "startDay": "1",
        "refresh": 60,
        "devices": [
            "Đèn B"
        ],
        "singleOff": true,
        "onlySendChange": false,
        "customPayload": false,
        "eventMode": false,
        "eventOptions": [],
        "sendTopic": true,
        "lat": "10.818328",
        "lon": "106.766971",
        "customContextStore": "default",
        "outputs": 2,
        "order": 1,
        "width": 0,
        "height": 0,
        "x": 240,
        "y": 800,
        "wires": [
            [
                "ea4324b2be119436"
            ],
            []
        ]
    },
    {
        "id": "ea4324b2be119436",
        "type": "function",
        "z": "bf91fb810eb5ad4a",
        "name": "Hàm lập lịch đèn B",
        "func": "// Step 1: Parse string to object\nlet data = JSON.parse(msg.payload);\n\n// Step 2: Check timers array\nif (data.timers && data.timers.length > 0) {\n    // Get the last timer\n    let lastTimer = data.timers[data.timers.length - 1];\n\n    // Step 3: Create new object with only the last timer\n    msg.payload = {\n        timers: [lastTimer],\n        settings: data.settings || {},\n        device: \"b\"\n    };\n\n    // Step 4: Convert back to string\n\n    return msg;\n} else {\n    // If no timers, send empty\n    msg.payload = {\n        timers: [],\n        settings: data.settings || {},\n        device: \"b\"\n    };\n\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 800,
        "wires": [
            [
                "a3f8bdee7db167e4",
                "10a1968899266722",
                "7afc6f20ca1b9967"
            ]
        ]
    },
    {
        "id": "10a1968899266722",
        "type": "function",
        "z": "bf91fb810eb5ad4a",
        "name": "Unix Time Formater",
        "func": "// Parse timers from payload\nlet timers = msg.payload.timers;\n\nfunction convertToTimeString(timestamp) {\n    let date = new Date(timestamp);\n    let vietnamTime = new Date(date.getTime() + (7 * 60 * 60 * 1000));\n    let hours = vietnamTime.getUTCHours().toString().padStart(2, '0');\n    let minutes = vietnamTime.getUTCMinutes().toString().padStart(2, '0');\n    let seconds = vietnamTime.getUTCSeconds().toString().padStart(2, '0');\n    return `${hours}:${minutes}:${seconds}`;\n}\n\n// Check if timers exist\nif (timers && timers.length > 0\n&& !(\"disabled\" in timers[0])) {\n    // Convert to Date object\n    let startString = convertToTimeString(timers[0].starttime);\n    let endString = convertToTimeString(timers[0].endtime);\n\n    // Output\n    msg.payload = `${startString}|${endString}|${timers[0].days}|b`;\n}\nelse\n{\n    msg.payload = 'b';\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 800,
        "wires": [
            [
                "f042c6fc62f999b6"
            ]
        ]
    },
    {
        "id": "a3f8bdee7db167e4",
        "type": "json",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 370,
        "y": 720,
        "wires": [
            [
                "90ffda7df7829bb6",
                "c12d9d01c6579687"
            ]
        ]
    },
    {
        "id": "eb533d982d3409bd",
        "type": "mqtt out",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "topic": "home/22127392clc/relayControl/b",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "787c15375433df86",
        "x": 820,
        "y": 480,
        "wires": []
    },
    {
        "id": "f042c6fc62f999b6",
        "type": "mqtt out",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "topic": "home/22127392clc/relaySchedule/b",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "787c15375433df86",
        "x": 940,
        "y": 800,
        "wires": []
    },
    {
        "id": "6bc066bfb16fb9f0",
        "type": "ui_table",
        "z": "bf91fb810eb5ad4a",
        "group": "70ebba2c7e43c04c",
        "name": "Bảng Logs",
        "order": 1,
        "width": 20,
        "height": 4,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1070,
        "y": 1040,
        "wires": []
    },
    {
        "id": "03b7f8f711ae1dc1",
        "type": "inject",
        "z": "bf91fb810eb5ad4a",
        "name": "Inject",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 980,
        "wires": [
            [
                "e1a0f1b73bec7905"
            ]
        ]
    },
    {
        "id": "e1a0f1b73bec7905",
        "type": "function",
        "z": "bf91fb810eb5ad4a",
        "name": "Thiết lập trang log mặc định",
        "func": "let pageSize = 15;\nflow.set(\"pageSize\", pageSize);\nflow.set(\"direction\", \"initial\");\nflow.set(\"history\", [null]);\nflow.set(\"currentPage\", 0);\nreturn { payload: null };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 980,
        "wires": [
            [
                "58632c572970d61d"
            ]
        ]
    },
    {
        "id": "67b31b5e41827b8f",
        "type": "http request",
        "z": "bf91fb810eb5ad4a",
        "name": "Firebase Logs HTTP Request",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 690,
        "y": 980,
        "wires": [
            [
                "f41486895238209d"
            ]
        ]
    },
    {
        "id": "3e427c4cd1f2b7c2",
        "type": "function",
        "z": "bf91fb810eb5ad4a",
        "name": "Format Data",
        "func": "let data = msg.payload;\nif (!data) return null;\n\nlet rows = [];\nlet keys = Object.keys(data).sort();\nconst direction = flow.get(\"direction\") || \"initial\";\n\nlet newNextKey = keys[0];\nlet newCurrentKey = keys[keys.length - 1];\n\nlet history = flow.get(\"history\") || [null];\nconst currentPage = flow.get(\"currentPage\") || 0;\n\nif (currentPage == history.length - 1 && keys.length >= 15)\n{\n    history.push(newNextKey);\n}\nhistory[currentPage] = newCurrentKey;\n\nfunction ViDateTime(timestamp)\n{\n    return new Date(timestamp * 1000).toLocaleString(\"vi-VN\");\n}\n\nfunction ViTime(timestamp)\n{\n    return new Date(timestamp)\n              .toLocaleTimeString(\"vi-VN\", { hour: '2-digit', minute: '2-digit' });\n}\n\nfunction formatData(item)\n{\n    let event = \"\";\n    let note = \"\";\n    let device = item.device === \"a\" ? \"Đèn phòng khách\":\"Đèn phòng ngủ\";\n    if(item.src === \"web\")\n    {\n        event = item.action ? \" được bật\" : \" được tắt\";\n        note = \"Thông qua điều khiển web\";\n    }\n    else if(item.src === \"reset\")\n    {\n        if(item.device === \"esp\")\n            device = \"ESP32\";\n        event = \" khởi động lại\";\n        switch (item.action) {\n            case 1: note = \"ESP32 vừa được bắt đầu khởi động\"; break;\n            case 2: note = \"External reset: Nút reset được nhấn\"; break;\n            case 3: note = \"Software reset: Phần mềm yêu cầu khởi động lại\"; break;\n            case 4: note = \"Crash reset: Phần mềm bị crash\"; break;\n            case 5: note = \"Interrupt watchdog: Hệ thống bị gián đoạn\"; break;\n            case 6: note = \"Task watchdog: Task dừng phản hồi\"; break;\n            case 7: note = \"Watchdog reset: Hệ thống bị đứng\"; break;\n            case 8: note = \"ESP32 vừa thức dậy (thoát khổi sleep mode)\"; break;\n            case 9: note = \"Nguồn điện yếu hoặc mất điện\"; break;\n            case 10: note = \"SDIO reset\"; break;\n            case 11: note = \"Reset thông qua USB\"; break;\n            case 12: note = \"JTAG reset: Reset bởi tool debug\"; break;\n            default: note = \"Nguyên nhân không xác định\";\n        }\n    }\n    else if(item.src === \"webT\")\n    {\n        if(item.action === \"clear\"){\n            event = \" đã hủy hẹn giờ\";\n        }\n        else{\n            const weekdayNames = [\n                \"Chủ nhật\", \"Hai\", \n                \"Ba\", \"Tư\", \n                \"Năm\", \"Sáu\", \"Bảy\"\n            ];\n\n            let action = item.action;\n            let activeDays = action.weekdays\n                .map((val, index) => val ? weekdayNames[index] : null)\n                .filter(day => day !== null);\n            let logString = activeDays.length > 0\n                ? \"Lịch áp dụng vào thứ: \" + activeDays.join(\", \")\n                : \"Chưa có lịch các ngày áp dụng trong tuần\";\n\n            event =  ViTime(action.start) + \" và tắt lúc \" +\n                ViTime(action.end);\n            event = action.disable ? \" đã vô hiệu hoá hẹn giờ bật lúc \" + event\n            : \" đã cập nhật hẹn giờ bật lúc \" + event;  \n            note = logString          \n        }\n    }\n    else if(item.src === \"t\")\n    {\n        event = item.action ? \" được bật\" : \" được tắt\";\n        note = \"Thông qua hẹn giờ\";\n    }\n\n    return {\n        \"Thời gian\": ViDateTime(item.timestamp),\n        \"Thiết bị\": device,\n        \"Sự kiện\": device + event,\n        \"Ghi chú\": note\n    }\n}\n\n// Format log entries\nkeys.forEach(k => {\n    const item = data[k];\n    rows.push(formatData(item));\n});\n\n// Reverse to show most recent first\nif(currentPage != 0 && rows.length > 1)\n    rows.pop();\nrows.reverse();\nmsg.payload = rows;\nmsg.ui_control = {\n    tabulator: {\n        layout: \"fitColumns\",\n        columns: [\n            {\n                title: \"Thời gian\",\n                field: \"Thời gian\",\n                cssClass: \"wrap-cell\"\n            },\n            {\n                title: \"Thiết bị\",\n                field: \"Thiết bị\",\n                cssClass: \"wrap-cell\"\n            },\n            {\n                title: \"Sự kiện\",\n                field: \"Sự kiện\",\n                cssClass: \"wrap-cell\"\n            },\n            {\n                title: \"Ghi chú\",\n                field: \"Ghi chú\",\n                cssClass: \"wrap-cell\"\n            }\n        ]\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1040,
        "wires": [
            [
                "6bc066bfb16fb9f0"
            ]
        ]
    },
    {
        "id": "f41486895238209d",
        "type": "json",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 670,
        "y": 1040,
        "wires": [
            [
                "3e427c4cd1f2b7c2"
            ]
        ]
    },
    {
        "id": "58632c572970d61d",
        "type": "function",
        "z": "bf91fb810eb5ad4a",
        "name": "Logic tạo logs Request",
        "func": "const basePath = \"https://aiotgroup11-lightingsystem-default-rtdb.asia-southeast1.firebasedatabase.app/activity_logs.json\";\nconst secret = \"ASuvJFgwU8Vzict4x5SUyWwzG3zG7mk9LdEtUCCy\";\nconst pageSize = flow.get(\"pageSize\") || 15;\nconst direction = flow.get(\"direction\") || \"initial\";\nconst currentPage = flow.get(\"currentPage\") || 0;\nlet history = flow.get(\"history\") || [null];\n\nlet url;\n\nif (direction === \"initial\" || currentPage == 0) {\n    url = `${basePath}?orderBy=\\\"$key\\\"&limitToLast=${pageSize}&auth=${secret}`;\n}\nelse{\n    url = `${basePath}?orderBy=\\\"$key\\\"&endAt=\\\"${history[currentPage]}\\\"&limitToLast=${pageSize + 1}&auth=${secret}`;\n}\n\nmsg.method = \"GET\";\nmsg.url = url;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1040,
        "wires": [
            [
                "67b31b5e41827b8f"
            ]
        ]
    },
    {
        "id": "3f3d0fb33b9a3c6c",
        "type": "function",
        "z": "bf91fb810eb5ad4a",
        "name": "Logic di chuyển các trang trong bảng log",
        "func": "flow.set(\"direction\", msg.payload);\nconst history = flow.get(\"history\") || [null];\nlet currentPage = flow.get(\"currentPage\") || 0;\nif(msg.payload === \"next\")\n    ++currentPage;\nelse\n    --currentPage;\n\nif(currentPage > history.length - 1)\n{\n    --currentPage;\n}\n\nif (currentPage < 0) {\n    currentPage = 0;\n}\n\nflow.set(\"currentPage\", currentPage);\nreturn {};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1120,
        "wires": [
            [
                "58632c572970d61d"
            ]
        ]
    },
    {
        "id": "f3b426e2dba73113",
        "type": "ui_button",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "group": "70ebba2c7e43c04c",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Cũ hơn >",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "next",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 1080,
        "wires": [
            [
                "3f3d0fb33b9a3c6c"
            ]
        ]
    },
    {
        "id": "f21f787e147226cf",
        "type": "ui_button",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "group": "70ebba2c7e43c04c",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "< Mới hơn",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "back",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 1120,
        "wires": [
            [
                "3f3d0fb33b9a3c6c"
            ]
        ]
    },
    {
        "id": "d438ee945e80beef",
        "type": "ui_button",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "group": "70ebba2c7e43c04c",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "🔄Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 1040,
        "wires": [
            [
                "e1a0f1b73bec7905"
            ]
        ]
    },
    {
        "id": "7afc6f20ca1b9967",
        "type": "function",
        "z": "bf91fb810eb5ad4a",
        "name": "Create Firebase Upload payload",
        "func": "const baseUrl = \"https://aiotgroup11-lightingsystem-default-rtdb.asia-southeast1.firebasedatabase.app/\";\nconst path = \"activity_logs\"; // Adjust this path as needed\nconst auth = \"ASuvJFgwU8Vzict4x5SUyWwzG3zG7mk9LdEtUCCy\"; // NOT RECOMMENDED for production\n\nmsg.method = \"POST\";  // or PATCH if updating multiple keys\nmsg.url = `${baseUrl}${path}.json?auth=${auth}`;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nlet timers = msg.payload.timers;\nlet disableMode = msg.payload.settings.disabledDevices\nif (timers && timers.length > 0) {\n    // Output\n    msg.payload = {\n        action:{\n            start: timers[0].starttime,\n            end: timers[0].endtime,\n            weekdays:timers[0].days,\n            disable: disableMode.length == 0 ? false:true\n        },\n        device:msg.payload.device,\n        src: \"webT\",\n        timestamp: Math.floor(Date.now() / 1000)\n    };\n}\nelse\n{\n    msg.payload = {\n        action:\"clear\",\n        device:msg.payload.device,\n        src: \"webT\",\n        timestamp: Math.floor(Date.now() / 1000)\n    };\n} // switch state: true or false\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 700,
        "wires": [
            [
                "781d3756edcc74e1"
            ]
        ]
    },
    {
        "id": "9cef9c0d2f665777",
        "type": "http request",
        "z": "bf91fb810eb5ad4a",
        "name": "Gửi log lên Firebase",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1200,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "781d3756edcc74e1",
        "type": "json",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1010,
        "y": 700,
        "wires": [
            [
                "9cef9c0d2f665777"
            ]
        ]
    },
    {
        "id": "548bebd12bf728d1",
        "type": "ui_template",
        "z": "bf91fb810eb5ad4a",
        "group": "70ebba2c7e43c04c",
        "name": "UI Template",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<style>\n    /* Apply to any cell using \"wrap-cell\" class */\n    .wrap-cell {\n        white-space: normal !important;\n        word-break: break-word;\n        line-height: 1.2em;\n        padding-top: 6px !important;\n        padding-bottom: 6px !important;\n    }\n\n    /* Optional: reduce row spacing to match line height */\n    .nr-dashboard-cardpanel .tabulator-cell {\n        line-height: 1.2em;\n    }\n</style>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 870,
        "y": 1100,
        "wires": [
            [
                "6bc066bfb16fb9f0"
            ]
        ]
    },
    {
        "id": "44300591c3419d51",
        "type": "http request",
        "z": "bf91fb810eb5ad4a",
        "name": "Firebase static Request",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 410,
        "y": 1300,
        "wires": [
            [
                "1254abaebddd8208"
            ]
        ]
    },
    {
        "id": "1254abaebddd8208",
        "type": "json",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 1240,
        "wires": [
            [
                "function_process_data"
            ]
        ]
    },
    {
        "id": "e7eecf86b581152e",
        "type": "function",
        "z": "bf91fb810eb5ad4a",
        "name": "Logic tạo log request",
        "func": "// If coming from date picker, msg.payload is a timestamp (ms)\nlet selectedTimestamp = flow.get(\"selectedDate\") || Date.now();\nlet selected = new Date(selectedTimestamp);\n\n// Extract year and month for the query\nlet year = selected.getFullYear();\nlet month = selected.getMonth(); // 0-based\n\n// Start and end of the month (in UTC)\nlet monthStart = new Date(year, month, 1).getTime() / 1000;\nlet monthEnd = new Date(year, month + 1, 0, 23, 59, 59).getTime() / 1000;\n\nlet startAt = Math.floor(monthStart);\nlet endAt = Math.floor(monthEnd);\n\n// For daily reference, extract date string (YYYY-MM-DD) from local time\nlet localDateStr = selected.toLocaleDateString(\"sv-SE\"); // gives 'YYYY-MM-DD'\n\n\nconst secret = \"ASuvJFgwU8Vzict4x5SUyWwzG3zG7mk9LdEtUCCy\";\n\n// Build Firebase URL\nlet url = `https://aiotgroup11-lightingsystem-default-rtdb.asia-southeast1.firebasedatabase.app/power.json?orderBy=%22timestamp%22&startAt=${startAt}&endAt=${endAt}&auth=${secret}`;\n\n// Attach info to msg\nmsg.method = \"GET\";\nmsg.url = url;\nmsg.dateFilter = localDateStr;  // used later for daily filtering\nmsg.startAt = startAt;\nmsg.endAt = endAt;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1300,
        "wires": [
            [
                "44300591c3419d51"
            ]
        ]
    },
    {
        "id": "function_process_data",
        "type": "function",
        "z": "bf91fb810eb5ad4a",
        "name": "Xử lý dữ liệu",
        "func": "if (!msg.payload || Object.keys(msg.payload).length === 0) {\n    node.warn(\"No data found for the selected range.\");\n    // payload is empty or undefined\n    return msg.payload;  // or set a warning\n}\n\nlet data = msg.payload;\n\nlet voltage = 3.3;\n\n// Extract selected date from msg, fallback to today\nlet dateFilter = msg.dateFilter || new Date().toISOString().split(\"T\")[0];\n\n// Convert dateFilter to Date object\nlet selectedDateObj = new Date(dateFilter + \"T00:00:00Z\");\nlet filterYear = selectedDateObj.getFullYear();\nlet filterMonth = selectedDateObj.getMonth(); // 0-based\n\nlet hourlyData = {};  // used for selected date (daily/hourly chart)\nlet dailyData = {};   // used for entire month (monthly chart)\n\nfor (let key in data) {\n    let entry = data[key];\n    if (typeof entry.current !== 'number' || !entry.timestamp) continue;\n\n    let absCurrent = Math.abs(entry.current);\n    let ts = new Date(entry.timestamp * 1000); // UTC+7\n\n    let entryDate = ts.toISOString().split(\"T\")[0];\n    let entryMonth = ts.getMonth();\n    let entryYear = ts.getFullYear();\n    let hour = ts.getHours().toString().padStart(2, '0');\n\n    let power = absCurrent * voltage;\n    let energyWh = power * (1 / 60); // 1-minute interval assumption\n\n    // Daily chart: match only the selected date\n    if (entryDate === dateFilter) {\n        if (!hourlyData[hour]) hourlyData[hour] = [];\n        hourlyData[hour].push(energyWh);\n    }\n\n    // Monthly chart: match year and month from selected date\n    if (entryMonth === filterMonth && entryYear === filterYear) {\n        if (!dailyData[entryDate]) dailyData[entryDate] = 0;\n        dailyData[entryDate] += energyWh;\n    }\n}\n\n// --- Build Daily Chart (Hourly) ---\nlet dailyLabels = [];\nlet dailyValues = [];\nfor (let h = 0; h < 24; h++) {\n    let hourStr = h.toString().padStart(2, '0');\n    let values = hourlyData[hourStr] || [];\n    let total = values.reduce((a, b) => a + b, 0);\n    dailyLabels.push(hourStr + \":00\");\n    dailyValues.push(Number(Math.max(0, total.toFixed(2))));\n}\n\n// --- Build Monthly Chart (Daily) ---\nlet sortedDays = Object.keys(dailyData).sort();\nlet monthlyLabels = [];\nlet monthlyValues = [];\nfor (let day of sortedDays) {\n    monthlyLabels.push(day);\n    monthlyValues.push(Number(Math.max(0, dailyData[day].toFixed(2))));\n}\n\nlet [year, month] = dateFilter.split(\"-\");\nlet monthLabel = `${month}-${year}`;\n\nmsg.payload = {\n    daily: {\n        labels: dailyLabels,\n        data: dailyValues,\n        title: `Lượng điện tiêu thụ trong ngày ${dateFilter}(Wh)`\n    },\n    monthly: {\n        labels: monthlyLabels,\n        data: monthlyValues,\n        title: `Lượng điện tiêu thụ trong tháng ${monthLabel}(Wh)`\n    }\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1300,
        "wires": [
            [
                "function_split_charts"
            ]
        ]
    },
    {
        "id": "function_split_charts",
        "type": "function",
        "z": "bf91fb810eb5ad4a",
        "name": "Chia dữ liệu cho từng bảng",
        "func": "if (!msg.payload || Object.keys(msg.payload).length === 0){\n  return [\n  {\n    payload: []\n  },\n  {\n    payload: []\n  }\n];\n}\nlet daily = msg.payload.daily;\nlet monthly = msg.payload.monthly;\n\nlet dailyPoints = daily.labels.map((label, i) => ({\n  \"x\": \"1970-01-01T\" + label + \":00.000Z\",\n  \"y\": daily.data[i]\n}));\n\nlet monthlyPoints = monthly.labels.map((label, i) => ({\n  \"x\": label + \"T00:00:00.000Z\",\n  \"y\": monthly.data[i]\n}));\n\nreturn [\n  {\n    payload: [{\n      series: [msg.payload.daily.title],\n      labels: daily.labels,\n      data: [dailyPoints]\n    }]\n  },\n  {\n    payload: [{\n      series: [msg.payload.monthly.title],\n      labels: monthly.labels,\n      data: [monthlyPoints]\n    }]\n  }\n];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1300,
        "wires": [
            [
                "ui_chart_daily"
            ],
            [
                "ui_chart_monthly"
            ]
        ]
    },
    {
        "id": "ui_chart_daily",
        "type": "ui_chart",
        "z": "bf91fb810eb5ad4a",
        "name": "Bảng dữ liệu ngày",
        "group": "bf0080d54169eb07",
        "order": 1,
        "width": 10,
        "height": 5,
        "label": "Lượng điện tiêu thụ trong ngày (Wh)",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "No data",
        "dot": true,
        "ymin": "0",
        "ymax": "20.0",
        "removeOlder": "0",
        "removeOlderPoints": "25",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#3fadb5",
            "#1f77b4",
            "#aec7e8",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1130,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "ui_chart_monthly",
        "type": "ui_chart",
        "z": "bf91fb810eb5ad4a",
        "name": "Bảng dữ liệu tháng",
        "group": "bf0080d54169eb07",
        "order": 2,
        "width": 10,
        "height": 5,
        "label": "Lượng điện tiêu thụ trong tháng (Wh)",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "No data",
        "dot": true,
        "ymin": "0",
        "ymax": "1000",
        "removeOlder": "0",
        "removeOlderPoints": "31",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#ff9900",
            "#66aa00",
            "#f62c2c",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1130,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "e1ed0c6e1405d7be",
        "type": "ui_date_picker",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "label": "Form Lọc theo ngày/tháng.",
        "group": "bf0080d54169eb07",
        "order": 3,
        "width": 10,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 340,
        "y": 1400,
        "wires": [
            [
                "7641ce70691103f2"
            ]
        ]
    },
    {
        "id": "7641ce70691103f2",
        "type": "function",
        "z": "bf91fb810eb5ad4a",
        "name": "Logic filter",
        "func": "// When user selects a date or it's auto-set\nflow.set(\"selectedDate\", msg.payload);  // timestamp (ms)\nreturn {};  // don't need to pass forward",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1400,
        "wires": [
            [
                "e7eecf86b581152e"
            ]
        ]
    },
    {
        "id": "0db601025066726b",
        "type": "inject",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1240,
        "wires": [
            [
                "e7eecf86b581152e"
            ]
        ]
    },
    {
        "id": "c5718f442f70e583",
        "type": "inject",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 1380,
        "wires": [
            [
                "e1ed0c6e1405d7be"
            ]
        ]
    },
    {
        "id": "029e153073de2b87",
        "type": "ui_button",
        "z": "bf91fb810eb5ad4a",
        "name": "",
        "group": "bf0080d54169eb07",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "🔄Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 1420,
        "wires": [
            [
                "e1ed0c6e1405d7be"
            ]
        ]
    },
    {
        "id": "1e38c5bbc327ab52",
        "type": "comment",
        "z": "bf91fb810eb5ad4a",
        "name": "Flow đặt lịch hẹn giờ",
        "info": "",
        "x": 330,
        "y": 560,
        "wires": []
    },
    {
        "id": "58564de5490c271f",
        "type": "comment",
        "z": "bf91fb810eb5ad4a",
        "name": "Flow bảng log",
        "info": "",
        "x": 170,
        "y": 940,
        "wires": []
    },
    {
        "id": "2a74f1d7b90cd56f",
        "type": "comment",
        "z": "bf91fb810eb5ad4a",
        "name": "Flow bảng thống kê điện tiêu thụ",
        "info": "",
        "x": 190,
        "y": 1200,
        "wires": []
    },
    {
        "id": "00a6216ddcf75443",
        "type": "mqtt in",
        "z": "bf91fb810eb5ad4a",
        "name": "relayScheduleState/a",
        "topic": "home/22127392clc/relayScheduleState/a",
        "qos": "2",
        "datatype": "utf8",
        "broker": "787c15375433df86",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 680,
        "wires": [
            [
                "81e5ee6677e15799"
            ]
        ]
    },
    {
        "id": "3636c38179f64371",
        "type": "mqtt in",
        "z": "bf91fb810eb5ad4a",
        "name": "relayScheduleState/b",
        "topic": "home/22127392clc/relayScheduleState/b",
        "qos": "2",
        "datatype": "utf8",
        "broker": "787c15375433df86",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 720,
        "wires": [
            [
                "90ffda7df7829bb6"
            ]
        ]
    },
    {
        "id": "c12d9d01c6579687",
        "type": "mqtt out",
        "z": "bf91fb810eb5ad4a",
        "name": "relayScheduleState/b",
        "topic": "home/22127392clc/relayScheduleState/b",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "787c15375433df86",
        "x": 560,
        "y": 720,
        "wires": []
    },
    {
        "id": "c5faa848497ca415",
        "type": "mqtt out",
        "z": "bf91fb810eb5ad4a",
        "name": "relayScheduleState/a",
        "topic": "home/22127392clc/relayScheduleState/a",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "787c15375433df86",
        "x": 560,
        "y": 680,
        "wires": []
    },
    {
        "id": "40455dde01297049",
        "type": "ui_spacer",
        "z": "bf91fb810eb5ad4a",
        "name": "spacer",
        "group": "bf0080d54169eb07",
        "order": 4,
        "width": 10,
        "height": 1
    },
    {
        "id": "c783a17022a16d07",
        "type": "ui_spacer",
        "z": "bf91fb810eb5ad4a",
        "name": "spacer",
        "group": "70ebba2c7e43c04c",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "aa259551cfd6f6e3",
        "type": "ui_spacer",
        "z": "bf91fb810eb5ad4a",
        "name": "spacer",
        "group": "70ebba2c7e43c04c",
        "order": 6,
        "width": 4,
        "height": 1
    },
    {
        "id": "24a10c4b88df729a",
        "type": "ui_group",
        "name": "Tắt/Bật Đèn",
        "tab": "ce156c4f2fa67e8b",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "787c15375433df86",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "90",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a10e63e8134491e0",
        "type": "ui_group",
        "name": "Thiết đặt hẹn giờ đèn A",
        "tab": "ce156c4f2fa67e8b",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f154a3307f684ab4",
        "type": "ui_group",
        "name": "Thiết lập hèn giờ đèn B",
        "tab": "ce156c4f2fa67e8b",
        "order": 4,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "70ebba2c7e43c04c",
        "type": "ui_group",
        "name": "Hoạt động gần nhất",
        "tab": "d30d08299037fce8",
        "order": 2,
        "disp": true,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "bf0080d54169eb07",
        "type": "ui_group",
        "name": "Lịch sử điện tiêu thụ",
        "tab": "d30d08299037fce8",
        "order": 1,
        "disp": true,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "ce156c4f2fa67e8b",
        "type": "ui_tab",
        "name": "Điều khiển",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d30d08299037fce8",
        "type": "ui_tab",
        "name": "Thông số hoạt động",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    }
]
